name: Manual Build
on: [workflow_dispatch]

env:
  CARGO_TERM_COLOR: always
  MACOSX_DEPLOYMENT_TARGET: 10.7

jobs:
  manual_build:
    name: Manual Build

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-10.14]
        include:
          - os: ubuntu-latest
            exe_prefix: ''
            exe_suffix: ''
            dylib_prefix: 'lib'
            dylib_suffix: '.so'
          - os: windows-latest
            exe_prefix: ''
            exe_suffix: '.exe'
            dylib_prefix: ''
            dylib_suffix: '.dll'
          - os: macos-10.14
            exe_prefix: ''
            exe_suffix: ''
            dylib_prefix: 'lib'
            dylib_suffix: '.dylib'

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v2

      - name: Install Rust toolchain
        id: install_rust
        uses: actions-rs/toolchain@v1

      - name: Install macOS-specific packages
        if: runner.os == 'macOS'
        run: |
          brew install coreutils binutils gnu-tar
          cat >>"$GITHUB_PATH" <<EOF
          /usr/local/opt/coreutils/bin
          /usr/local/opt/binutils/bin
          /usr/local/opt/gnu-tar/libexec/gnubin
          EOF

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: |
            v2-${{ github.workflow }}-${{ runner.os }}-rust-${{ steps.install_rust.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            v2-${{ github.workflow }}-${{ runner.os }}-rust-${{ steps.install_rust.outputs.rustc_hash }}-
            v2-${{ github.workflow }}-${{ runner.os }}-rust-

      - name: Get platform information
        id: platform_info
        run: echo "::set-output name=triple::$(rustc --version --verbose | awk '/^host:/ { print $2 }')"

      - name: cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose --release

      - name: Build Node.js bindings
        working-directory: node-bindings
        run: |
          npm install --ignore-scripts
          npm run node-gyp rebuild -- -- -D rust_build_profile=release

      - name: Package the binaries
        run: |
          pkgdir="$RUNNER_TEMP"
          mkdir -pv "$pkgdir"

          cp -av \
            target/release/${{ matrix.exe_prefix }}crosslocale${{ matrix.exe_suffix }} \
            target/release/${{ matrix.dylib_prefix }}crosslocale${{ matrix.dylib_suffix }} \
            node-bindings/build/Release/crosslocale.node \
            "$pkgdir"

          cd "$pkgdir"

          if [[ "$RUNNER_OS" != "Windows" ]]; then
            strip -gv \
              ${{ matrix.exe_prefix }}crosslocale${{ matrix.exe_suffix }} \
              ${{ matrix.dylib_prefix }}crosslocale${{ matrix.dylib_suffix }} \
              crosslocale.node
          fi

          tar -czv --force-local -f "$RUNNER_TEMP"/package.tgz \
            ${{ matrix.exe_prefix }}crosslocale${{ matrix.exe_suffix }} \
            ${{ matrix.dylib_prefix }}crosslocale${{ matrix.dylib_suffix }} \
            crosslocale.node

      - name: Upload the artifacts
        uses: actions/upload-artifact@v1
        with:
          name: package-${{ steps.platform_info.outputs.triple }}.tgz
          path: ${{ runner.temp }}/package.tgz
